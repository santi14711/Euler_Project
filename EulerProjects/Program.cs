using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EulerProjects
{
    class Program
    {
        static void Main(string[] args)
        {

            #region "1st Euler Problem"

            /*If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
            The sum of these multiples is 23.
            Find the sum of all the multiples of 3 or 5 below 1000.*/


            //int mul()
            //{

            //int sum = 0;
            //for (int i = 0; i < 1000; i++)
            //{
            //    if (i % 3 == 0 || i % 5 == 0)
            //        sum += i;
            //}
            //return sum;

            //}
            //int resfinal = mul();
            //Console.WriteLine(resfinal);
            //Console.ReadLine();

            #endregion

            #region "2nd Euler Problem"

            /*Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
             * By starting with 1 and 2, the first 10 terms will be:
            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/



            //int res = Fibonacci();

            //int Fibonacci()
            //{
            //    int sum = 0;
            //    int num1 = 1;
            //    int num2 = 2;

            //    while(num1<=4000000)
            //    {
            //        int num1temp = num1; 
            //        num1 = num2;    
            //        num2 += num1temp;  

            //        if ((num1 %2)==0)
            //        {
            //            sum += num1;
            //        }
            //    }
            //    return sum; //returns 4613732
            //}

            #endregion

            #region "3rd Euler Problem"

            /*The prime factors of 13195 are 5, 7, 13 and 29.
            What is the largest prime factor of the number 600851475143 ?*/


            //factor();

            //void factor()
            //{
            //    long num = 600851475143;
            //    int x = 2;

            //    for (int i = 0; i < num; i++)
            //    {
            //        if (num % x == 0) //revisa si el numero es divisible por 2,3,4...
            //        {
            //            num /= x;    //si es divisible, entonces lo divide y lo guarda en numero

            //            x = 2;      //volvemos a setear x en 2 para que el nuevo numero comience de nuevo el proceso

            //        }
            //        else
            //        {
            //            x++; //de no ser divisible incrementa el valor para encontrar el maximo que si lo sea
            //        }
            //    }
            //    Console.WriteLine(num);

            //}

            //    Console.ReadLine();

            #endregion

            #region "4th Euler Problem"

            /*A palindromic number reads the same both ways. 
             * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
            Find the largest palindrome made from the product of two 3-digit numbers.*/


            //int max = 0; //variable que guarda el maximo 
            //int b = 0; //variable de primer numero
            //int a = 0; //variable de segundo numero
            //int amax = 0; //variable que guarda el maximo multiplo a
            //int bmax = 0; //variable que guarda el maximo multiplo b

            //for (a = 100; a < 1000; a++) //recorremos el primer numero 
            //{
            //    for (b = 100; b < 1000; b++) //y por cada cambio en el primero cambiamos el segundo
            //    {

            //        if (palindrome(a, b) == true) //si esa multiplicacion es palindroma la guardamos
            //        {

            //            if ((a * b) > max) //pero verificamos que sea el valor maximo que hayamos conseguido 
            //            {
            //                max = a * b;
            //                amax = a; //guardamos valores de los multiplos
            //                bmax = b;

            //            }
            //        }
            //    }
            //}

            //bool palindrome(int x, int y) //funcion que determina si son palindromos 
            //{
            //    int z = x * y; //enviamos 2 numeros y conseguimos su resultado 

            //    string pal = Convert.ToString(z); //convertimos el resultado a string

            //    char[] palinv = pal.ToCharArray(); //pasamos el string a un array
            //    Array.Reverse(palinv); //invertimos el array 
            //    string palinvertido = new string(palinv); //lo volvemos a un string distinto 
            //    if (pal.Equals(palinvertido)) //verificamos si ambos son iguales y retornamos un valor 
            //    {
            //        return true;
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}
            //Console.WriteLine("------" + max + "-----" + amax + "-------" + bmax);
            //Console.ReadLine();

            #endregion

            #region "5th Euler Problem" 

            /*2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*/


            //int i = 20; //variable que guardara el valor

            //while (i % 2 != 0 || i % 3 != 0 || i % 4 != 0 || i % 5 != 0 ||
            //         i % 6 != 0 || i % 7 != 0 || i % 8 != 0 || i % 9 != 0 ||
            //         i % 10 != 0 || i % 11 != 0 || i % 12 != 0 || i % 13 != 0 ||
            //         i % 14 != 0 || i % 15 != 0 || i % 16 != 0 || i % 17 != 0 ||
            //         i % 18 != 0 || i % 19 != 0 || i % 20 != 0) //verificamos que mientras no sea divisible siga en el ciclo, del contrario sale y conseguimos el valor
            //{
            //    i += 20; //avanzamos de 20 en 20 porque son los multiplos
            //}
            //Console.WriteLine(i);
            //Console.ReadLine();

            #endregion

            #region "6th Euler Problem"

            /*The sum of the squares of the first ten natural numbers is,
            12 + 22 + ... + 102 = 385
            The square of the sum of the first ten natural numbers is,
            (1 + 2 + ... + 10)2 = 552 = 3025
            Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
            Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.*/


            //    int sum = 0;
            //    int exp = 0;

            //    for (int i = 0; i <= 100 ; i++) // conseguimos la suma de las primeras 100 cifras
            //    {
            //        sum += i;
            //    }

            //    sum *= sum; //elevamos esa suma al cuadrado

            //    for (int i = 0; i <= 100; i++) //conseguimos la suma de cada uno de los cuadrados del 1 al 100
            //    {
            //        exp = exp + (i * i);
            //    }

            //    int resultado = sum - exp; //restamos

            //    Console.WriteLine(resultado);
            //    Console.ReadLine();

            #endregion

            #region "7th Euler Problem"

            /* By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
            What is the 10 001st prime number?*/


            int i, n = 4, cont = 2;

            while (cont < 10001) //cantidad de numeros
            {
                i = 2;
                while (i <= n) //prueba divisores antes de llegar al numero
                {
                    if (i == n) //si el numero por si solo es divisor lo agrega a la cadena
                    {
                        cont++; //suma uno al contador de enteros 
                    }
                    else
                    {
                        if (n % i == 0) //si el numero dividido por
                        {
                            i = n;
                        }
                    }
                    i++;
                }
                n++;
            }



            Console.WriteLine(n); //mostramos el valor
            Console.ReadLine();

            #endregion

        }

    }

}
